@inproceedings{barthels2020automatic,
  title={Automatic generation of efficient linear algebra programs},
  author={Barthels, Henrik and Psarras, Christos and Bientinesi, Paolo},
  booktitle={Proceedings of the Platform for Advanced Scientific Computing Conference},
  pages={1--11},
  year={2020}
}

@online{ValueMLIR,
  author = {MLIR Developers},
  title = {MLIR Value},
  url = {https://mlir.llvm.org/doxygen/classmlir_1_1Value.html},
  urldate = {2022-04-20}
}

@article{bik2022compiler,
  title={Compiler Support for Sparse Tensor Computations in MLIR},
  author={Bik, Aart JC and Koanantakool, Penporn and Shpeisman, Tatiana and Vasilache, Nicolas and Zheng, Bixia and Kjolstad, Fredrik},
  journal={arXiv preprint arXiv:2202.04305},
  year={2022}
}

@book{cormen2009introduction,
  title={Introduction to algorithms},
  author={Cormen, Thomas H and Leiserson, Charles E and Rivest, Ronald L and Stein, Clifford},
  year={2009},
  publisher={MIT press}
}

@inproceedings{49991,
title	= {Progressive Raising in Multi-level IR},
author	= {Lorenzo Chelini and Andi Drebes and Alex Zinenko and Albert Cohen and Nicolas Vasilache and Tobias Grosser and Henk Corporaal},
year	= {2021},
booktitle	= {International Conference on Code Generation and Optimization (CGO)},
address	= {February 27th - March 3rd, 2021, Virtual Conference}
}

@article{barthels:21,
    author  = "Henrik Barthels and Christos Psarras and Paolo Bientinesi",
    title   = "Linnea: Automatic Generation of Efficient Linear Algebra Programs",
    journal = "ACM Transactions on Mathematical Software (TOMS)",
    year    = 2021,
    volume  = 47,
    number  = 3,
    pages   = "1--26",
    month   = jun,
    url     = "https://arxiv.org/pdf/1912.12924.pdf"
}

@inproceedings{10.1145/3168804,
author = {Barthels, Henrik and Copik, Marcin and Bientinesi, Paolo},
title = {The Generalized Matrix Chain Algorithm},
year = {2018},
isbn = {9781450356176},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3168804},
doi = {10.1145/3168804},
abstract = {In this paper, we present a generalized version of the matrix chain algorithm to generate efficient code for linear algebra problems, a task for which human experts often invest days or even weeks of works. The standard matrix chain problem consists in finding the parenthesization of a matrix product M := A1 A2 ⋯ An that minimizes the number of scalar operations. In practical applications, however, one frequently encounters more complicated expressions, involving transposition, inversion, and matrix properties. Indeed, the computation of such expressions relies on a set of computational kernels that offer functionality well beyond the simple matrix product. The challenge then shifts from finding an optimal parenthesization to finding an optimal mapping of the input expression to the available kernels. Furthermore, it is often the case that a solution based on the minimization of scalar operations does not result in the optimal solution in terms of execution time. In our experiments, the generated code outperforms other libraries and languages on average by a factor of about 9. The motivation for this work comes from the fact that—despite great advances in the development of compilers—the task of mapping linear algebra problems to optimized kernels is still to be done manually. In order to relieve the user from this complex task, new techniques for the compilation of linear algebra expressions have to be developed.},
booktitle = {Proceedings of the 2018 International Symposium on Code Generation and Optimization},
pages = {138–148},
numpages = {11},
keywords = {matrix chain problem, linear algebra, compiler},
location = {Vienna, Austria},
series = {CGO 2018}
}

@article{10.1145/3446632,
author = {Barthels, Henrik and Psarras, Christos and Bientinesi, Paolo},
title = {Linnea: Automatic Generation of Efficient Linear Algebra Programs},
year = {2021},
issue_date = {September 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {47},
number = {3},
issn = {0098-3500},
url = {https://doi.org/10.1145/3446632},
doi = {10.1145/3446632},
abstract = {The translation of linear algebra computations into efficient sequences of library calls is a non-trivial task that requires expertise in both linear algebra and high-performance computing. Almost all high-level languages and libraries for matrix computations (e.g., Matlab, Eigen) internally use optimized kernels such as those provided by BLAS and LAPACK; however, their translation algorithms are often too simplistic and thus lead to a suboptimal use of said kernels, resulting in significant performance losses. To combine the productivity offered by high-level languages, and the performance of low-level kernels, we are developing Linnea, a code generator for linear algebra problems. As input, Linnea takes a high-level description of a linear algebra problem; as output, it returns an efficient sequence of calls to high-performance kernels. Linnea uses a custom best-first search algorithm to find a first solution in less than a second, and increasingly better solutions when given more time. In 125 test problems, the code generated by Linnea almost always outperforms Matlab, Julia, Eigen, and Armadillo, with speedups up to and exceeding 10\texttimes{}.},
journal = {ACM Trans. Math. Softw.},
month = {jun},
articleno = {22},
numpages = {26},
keywords = {code generation, Linear algebra}
}

@article{kjolstad:17,
 author = {Kjolstad, Fredrik and Kamil, Shoaib and Chou, Stephen and Lugato, David and Amarasinghe, Saman},
 title = {The Tensor Algebra Compiler},
 journal = {Proc. ACM Program. Lang.},
 issue_date = {October 2017},
 volume = {1},
 number = {OOPSLA},
 month = oct,
 year = {2017},
 issn = {2475-1421},
 pages = {77:1--77:29},
 articleno = {77},
 numpages = {29},
 url = {http://doi.acm.org/10.1145/3133901},
 doi = {10.1145/3133901},
 acmid = {3133901},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {code generation, iteration graphs, linear algebra, merge lattices, parallelism, performance, sparse data structures, tensor algebra, tensors}
}

@INPROCEEDINGS{spampinato:18,
AUTHOR = {Daniele G. Spampinato and Diego Fabregat-Traver and Paolo Bientinesi and Markus P{\"u}schel},
TITLE = {Program Generation for Small-Scale Linear Algebra Applications},
BOOKTITLE = {International Symposium on Code Generation and Optimization (CGO)},
PAGES = {327--339},
YEAR = {2018}
}

@inproceedings{barthels2020automatic,
  title={Automatic generation of efficient linear algebra programs},
  author={Barthels, Henrik and Psarras, Christos and Bientinesi, Paolo},
  booktitle={Proceedings of the Platform for Advanced Scientific Computing Conference},
  pages={1--11},
  year={2020}
}

@book{cormen2009introduction,
  title={Introduction to algorithms},
  author={Cormen, Thomas H and Leiserson, Charles E and Rivest, Ronald L and Stein, Clifford},
  year={2009},
  publisher={MIT press}
}

@inproceedings{49991,
title	= {Progressive Raising in Multi-level IR},
author	= {Lorenzo Chelini and Andi Drebes and Alex Zinenko and Albert Cohen and Nicolas Vasilache and Tobias Grosser and Henk Corporaal},
year	= {2021},
booktitle	= {International Conference on Code Generation and Optimization (CGO)},
address	= {February 27th - March 3rd, 2021, Virtual Conference}
}

@article{10.1145/3446632,
author = {Barthels, Henrik and Psarras, Christos and Bientinesi, Paolo},
title = {Linnea: Automatic Generation of Efficient Linear Algebra Programs},
year = {2021},
issue_date = {September 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {47},
number = {3},
issn = {0098-3500},
url = {https://doi.org/10.1145/3446632},
doi = {10.1145/3446632},
abstract = {The translation of linear algebra computations into efficient sequences of library calls is a non-trivial task that requires expertise in both linear algebra and high-performance computing. Almost all high-level languages and libraries for matrix computations (e.g., Matlab, Eigen) internally use optimized kernels such as those provided by BLAS and LAPACK; however, their translation algorithms are often too simplistic and thus lead to a suboptimal use of said kernels, resulting in significant performance losses. To combine the productivity offered by high-level languages, and the performance of low-level kernels, we are developing Linnea, a code generator for linear algebra problems. As input, Linnea takes a high-level description of a linear algebra problem; as output, it returns an efficient sequence of calls to high-performance kernels. Linnea uses a custom best-first search algorithm to find a first solution in less than a second, and increasingly better solutions when given more time. In 125 test problems, the code generated by Linnea almost always outperforms Matlab, Julia, Eigen, and Armadillo, with speedups up to and exceeding 10\texttimes{}.},
journal = {ACM Trans. Math. Softw.},
month = {jun},
articleno = {22},
numpages = {26},
keywords = {Linear algebra, code generation}
}
